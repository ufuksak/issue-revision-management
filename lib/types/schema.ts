/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all issues */
        get: operations["getAllIssues"];
        put?: never;
        /** Create a new issue */
        post: operations["createNewIssue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/issues/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a issue by ID */
        get: operations["getIssueById"];
        /** Update the issue */
        put: operations["updateIssueById"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/issues/{id}/revisions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the revisions by the given issue */
        get: operations["getRevisionsByIssueId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/issues/{id}/revisions/diff": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the revision differences by the given issue */
        get: operations["getRevisionsDifferencesByIssueId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Issue: {
            id: number;
            title: string;
            description: string;
            created_by?: string;
            updated_by?: string;
            created_at?: string;
            updated_at?: string;
        };
        IssueInput: {
            title: string;
            description: string;
            revision?: string;
            state?: string;
            revisionTitle?: string;
        };
        Revision: {
            id: number;
            state: string;
            title: string;
            description: string;
            issueId?: number;
            created_by?: string;
            updated_by?: string;
            created_at?: string;
            updated_at?: string;
        };
        RevisionDifference: {
            before: {
                title?: string | null;
                description?: string | null;
                state?: string | null;
            };
            after: {
                title?: string | null;
                description?: string | null;
                state?: string | null;
            };
            changes: {
                title?: {
                    from?: string;
                    to?: string;
                } | null;
                description?: {
                    from?: string;
                    to?: string;
                } | null;
                state?: {
                    from?: string;
                    to?: string;
                } | null;
            };
            revisions: components["schemas"]["Revision"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAllIssues: {
        parameters: {
            query?: {
                /** @description The numbers of items to return */
                limit?: number;
                /** @description The number of items to skip before starting to collect the result set */
                offset?: number;
                /** @description Sorting field */
                sort?: string;
                /** @description Sort order asc/desc */
                order?: "ASC" | "DESC";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Issue"][];
                };
            };
        };
    };
    createNewIssue: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IssueInput"];
            };
        };
        responses: {
            /** @description User created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Issue"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getIssueById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Issue"];
                };
            };
            /** @description The Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateIssueById: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IssueInput"];
            };
        };
        responses: {
            /** @description Issue updated successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Issue"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRevisionsByIssueId: {
        parameters: {
            query?: {
                /** @description The numbers of items to return */
                limit?: number;
                /** @description The number of items to skip before starting to collect the result set */
                offset?: number;
                /** @description Sorting field */
                sort?: string;
                /** @description Sort order asc/desc */
                order?: "ASC" | "DESC";
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Revision"][];
                };
            };
            /** @description The Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRevisionsDifferencesByIssueId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RevisionDifference"];
                };
            };
            /** @description The Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
